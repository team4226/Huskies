package org.usfirst.frc4226.Huskies.commands;

import org.usfirst.frc4226.Huskies.Robot;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Drive_Turn_To_Setpoint extends PIDCommand {

private static final boolean debug = false;
	
	private static final double kP = 0.021;
	private static final double kI = 0.0;
	private static final double kD = 0.02;
	
    private boolean rotateToAngle;
	private double rotateToAngleRate;
	static final double kToleranceDegrees = 2.0f;
	
	
	private double m_moveValue;
    private double m_currentRotationRate;
    private double m_setpoint;
    Timer m_timer = new Timer();
	
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive_Turn_To_Setpoint(double setpoint) {
   
        super("turnController", kP, kI, kD, 0.02);
        getPIDController().setInputRange(-180.0f,  180.0f);
        getPIDController().setOutputRange(-0.75, 0.75);  //Max Power
        getPIDController().setAbsoluteTolerance(kToleranceDegrees);
        getPIDController().setContinuous(true);
 
        requires(Robot.drive);
        m_setpoint = setpoint;
        
    }
    
    /**
     * 
     * @param setpoint
     * @param outputrange
     */
    public Drive_Turn_To_Setpoint(double setpoint,double outputrange) {
    	   
        super("turnController", kP, kI, kD, 0.02);
        getPIDController().setInputRange(-180.0f,  180.0f);
        getPIDController().setOutputRange(-outputrange, outputrange);
        getPIDController().setAbsoluteTolerance(kToleranceDegrees);
        getPIDController().setContinuous(true);
 
        requires(Robot.drive);
        m_setpoint = setpoint;
        
    }

    protected double returnPIDInput() {
        return Robot.drive.getCurrentHeading();
       // return RobotMap.driveTrainAnalogGyro1.getAngle();
      
    }

    protected void usePIDOutput(double output) {
      
    	rotateToAngleRate = output;
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	if(debug){
    		System.out.println("DriveTurnToSetpoint Current setpoint: " + m_setpoint);
    	}
    	getPIDController().setSetpoint(m_setpoint);
        rotateToAngle = true;
    	Robot.drive.zeroDistanceTraveled();
    	m_timer.reset();
    	m_timer.start();    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//m_moveValue = Robot.oi.driveLTigger(); This is used with the POV code
    	getPIDController().enable();    
    	m_currentRotationRate = rotateToAngleRate;
        Robot.drive.driveArcade(m_moveValue, -m_currentRotationRate);
  
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return getPIDController().onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
    	getPIDController().disable();
    	// note:  it is important to call mecanumDriveCartesian here, rather than mecanumDriveAutonomous,
    	// to ensure that "heading preservation" isn't activated for the last instruction
    	Robot.drive.driveArcade(0.0, 0.0);
    	SmartDashboard.putNumber("Time", m_timer.get());
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
