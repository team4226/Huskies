// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4226.Huskies;

import edu.wpi.first.wpilibj.ADXL345_SPI;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSpeedController1;
    public static SpeedController driveSpeedController2;
    public static SpeedController driveSpeedController3;
    public static SpeedController driveSpeedController4;
    public static RobotDrive driveRobotDrive41;
    public static DoubleSolenoid clawDoubleSolenoid1;
    public static DoubleSolenoid clawDoubleSolenoid2;
    public static SpeedController climbSpeedController1;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static AnalogGyro driveTrainGyro ;
    public static Encoder driveTrainEncoder;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSpeedController1 = new Talon(0);
        LiveWindow.addActuator("Drive", "Speed Controller 1", (Talon) driveSpeedController1);
        
        driveSpeedController2 = new Talon(1);
        LiveWindow.addActuator("Drive", "Speed Controller 2", (Talon) driveSpeedController2);
        
        driveSpeedController3 = new Talon(2);
        LiveWindow.addActuator("Drive", "Speed Controller 3", (Talon) driveSpeedController3);
        
        driveSpeedController4 = new Talon(3);
        LiveWindow.addActuator("Drive", "Speed Controller 4", (Talon) driveSpeedController4);
        
        driveRobotDrive41 = new RobotDrive(driveSpeedController1, driveSpeedController2,
              driveSpeedController3, driveSpeedController4);
        
        driveRobotDrive41.setSafetyEnabled(true);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);

        //Warning, the two modules in robot builder are different!
        clawDoubleSolenoid1 = new DoubleSolenoid(2,3);
        LiveWindow.addActuator("Claw", "Double Solenoid 1", clawDoubleSolenoid1);
        
        //Warning, the two modules in robot builder are different!
        clawDoubleSolenoid2 = new DoubleSolenoid(4,5);
        LiveWindow.addActuator("Claw", "Double Solenoid 2", clawDoubleSolenoid2);
        
        climbSpeedController1 = new Talon(4);
        LiveWindow.addActuator("Climb", "Speed Controller 1", (Talon) climbSpeedController1);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        driveTrainGyro = new AnalogGyro(0);
        driveTrainGyro.setSensitivity(0.007);
        LiveWindow.addActuator("Drive", "AnalogGyro", driveTrainGyro);
        
        driveTrainEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addActuator("Drive", "Quadrature Encoder 1", driveTrainEncoder);
        driveTrainEncoder.setDistancePerPulse(0.052);
        driveTrainEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
         
    }
}
