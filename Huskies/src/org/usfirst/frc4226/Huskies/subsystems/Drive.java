// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4226.Huskies.subsystems;

import org.usfirst.frc4226.Huskies.RobotMap;
import org.usfirst.frc4226.Huskies.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController speedController1 = RobotMap.driveSpeedController1;
    private final SpeedController speedController2 = RobotMap.driveSpeedController2;
    private final SpeedController speedController3 = RobotMap.driveSpeedController3;
    private final SpeedController speedController4 = RobotMap.driveSpeedController4;
    private final RobotDrive robotDrive41 = RobotMap.driveRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final AnalogGyro gyro = RobotMap.driveTrainGyro;
    private final Encoder encoder = RobotMap.driveTrainEncoder;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new Drive_With_JoySticks());
    }
    public void forward(){
    	robotDrive41.drive(0.5, 0);
    }
    public void reverse(){
    	robotDrive41.drive(-0.5, 0);
    }
    public void stop(){
    	robotDrive41.drive(0, 0);
    }
	public void driveArcade(double moveValue, double rotateValue) {
		robotDrive41.arcadeDrive(moveValue, rotateValue);
		
	}
	public void zeroDistanceTraveled() {
		encoder.reset();
		
	}
	public double getDistanceTraveled() {
		// TODO Auto-generated method stub
		return Math.abs(encoder.getDistance());
	}
	public void tankDrive(double leftValue, double rightValue) {
		robotDrive41.tankDrive(leftValue, rightValue);
		
	}
	public double getCurrentHeading() {
		// TODO Auto-generated method stub
		return gyro.getAngle();
	}
	public void updatesmartdashboard(){
		
	}
}

