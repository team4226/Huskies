// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4226.Huskies;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4226.Huskies.commands.*;
import org.usfirst.frc4226.Huskies.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	//Disabled variables
    private Integer scancount = 0 ;
	private Integer sequence = 0 ;
	private Integer count = 0;
	
	private int m_auto = 4;
	private String autonomousSelected;
	public static SendableChooser autonomousChooser;
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drive drive;
    public static Claw claw;
    public static Climb climb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Joystick xbox1;
    public static Joystick xbox2;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new Drive();
        claw = new Claw();
        climb = new Climb(); 
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        xbox1=new Joystick(0);
        xbox2=new Joystick(1);
        SmartDashboard.putNumber("Manualy Selected Autonoums: ", m_auto);
        //autonomousCommand = new Auto_01_Peg_Center();
      //Set up Choosers
        autonomousChooser = new SendableChooser();
        autonomousChooser.addDefault("1: Auto_01_Peg_Center", new Auto_01_Peg_Center());					
        autonomousChooser.addObject("2: Auto_02_Peg_Left()", new Auto_02_Peg_Left());								
        autonomousChooser.addObject("3: Auto_03_Peg_Right()", new Auto_03_Peg_Right());	
        autonomousChooser.addObject("4: Auto_04_Mobility", new Auto_04_Mobility());
        //Add More Options
        
        //Place autonomousChooser on the SmartDashboard
        SmartDashboard.putData("Autonomous Chooser", autonomousChooser);
    }

    private void autoSelect(){
    	m_auto = (int) SmartDashboard.getNumber("Manualy Selected Autonoums: ", m_auto);
    	
    	try{
	    	switch(m_auto){
	    	case 1: 
	    		autonomousCommand = new Auto_01_Peg_Center();
	    		break;
	    	case 2: 
	    		autonomousCommand = new Auto_02_Peg_Left();
	    		break;
	    	case 3: 
	    		autonomousCommand = new Auto_03_Peg_Right();
	    		break;
	    	default:
	    		autonomousCommand = new Auto_04_Mobility();
	    		break;
	    	}
    	}catch (Exception e) {
			// TODO: handle exception
    		DriverStation.reportError("Failed to select Autonous, Error= "+ e, false);
		}
    }
    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
    	autonomousSelected = autonomousChooser.getSelected().toString();
        SmartDashboard.putString("Auto Choice", autonomousSelected);
        Scheduler.getInstance().run();
        updatesmartdashboards();
   
    }

    public void autonomousInit() {
    	//autoSelect();
    	autonomousCommand = (Command) autonomousChooser.getSelected();
    	autonomousSelected = autonomousChooser.getSelected().toString();
    	DriverStation.reportWarning("Auto Selected @ autonomousInit() = " + autonomousSelected, false);
    	
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
    	if (autonomousCommand != null) autonomousCommand.cancel();
        
       
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    	
		if(xbox1.getRawButton(6)){
			Robot.claw.openClaw();
		}
		else if(xbox1.getRawButton(5)){
			Robot.claw.closeClaw();
		}
		else if(xbox2.getRawButton(6)){
			Robot.claw.openClaw();
		}
		else if(xbox2.getRawButton(5)){
			Robot.claw.closeClaw();
		}
		if(xbox1.getRawButton(1)){
			Robot.climb.climb();
		}
		else if(xbox2.getRawButton(2)){
			Robot.climb.climb();
		}
		else if(xbox1.getRawButton(1)){
			Robot.climb.climb();
		}
		else if(xbox2.getRawButton(2)){
			Robot.climb.climb();
		}
		else{
			Robot.climb.stopClimb();
		}
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        
    }
    private void updatesmartdashboards(){
    	Robot.drive.updatesmartdashboard();
    }
}
